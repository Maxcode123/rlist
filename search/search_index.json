{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is rlist?","text":"<p><code>rlist</code> is a small Python library that provides the <code>rlist</code> type (record list), which  is a plain Python list extended with a few handy methods for in-place manipulation. The methods are inspired by the corresponding Ruby array methods.</p> <p>Example <pre><code>from rlist import rlist\n\npeople = [\n  {\"age\": 29, \"name\": \"John\", \"sex\": \"M\"},\n  {\"age\": 67, \"name\": \"Paul\", \"sex\": \"M\"},\n  {\"age\": 39, \"name\": \"George\", \"sex\": \"M\"},\n  {\"age\": 18, \"name\": \"Mary\", \"sex\": \"F\"},\n  {\"age\": 45: \"name\": \"Margaret\", \"sex\":  \"F\"}\n]\n\npeople.select(lambda p: p[\"age\"] &gt; 30).reject(lambda p: \"l\" in p[\"name\"]).map(lambda p: p[\"sex\"])\n</code></pre></p>"},{"location":"installation/","title":"Installation","text":"<p>Installation is as easy as:</p> <pre><code>pip install record-list\n</code></pre>"},{"location":"rlist/","title":"rlist","text":""},{"location":"rlist/#rlist.rlist.rlist","title":"<code>rlist</code>","text":"<p>               Bases: <code>Generic[R]</code></p> <p>Record list, provides handy methods for filtering items in addition to all the standard methods the built-in list provides.</p> Source code in <code>src/rlist/rlist.py</code> <pre><code>class rlist(Generic[R]):\n    \"\"\"\n    Record list, provides handy methods for filtering items in addition to all the\n    standard methods the built-in list provides.\n    \"\"\"\n\n    def __init__(self, items: Iterable[R] = list()) -&gt; None:\n        self._list: list[R] = list(items)\n\n    @_delegate\n    def append(self, item: R) -&gt; None: ...\n\n    @_delegate\n    def clear(self) -&gt; None: ...\n\n    def copy(self) -&gt; \"rlist\":\n        \"\"\"\n        Return a shallow copy of the rlist.\n        \"\"\"\n        return rlist(self._list)\n\n    @_delegate\n    def count(self, item: R) -&gt; int: ...  # ty: ignore[invalid-return-type]\n\n    @_delegate\n    def extend(self, iterable: Iterable[R]) -&gt; None: ...\n\n    @_delegate\n    def index(\n        self, item: R, start: int = 0, stop: int = maxsize\n    ) -&gt; int: ...  # ty: ignore[invalid-return-type]\n\n    @_delegate\n    def insert(self, index: int, item: R) -&gt; None: ...\n\n    def map(self, func: MapFunc) -&gt; \"rlist\":\n        \"\"\"\n        Apply the given function to the items of the list and return a new instance\n        of rlist with the mapped items.\n\n        ## Example\n\n        ```python\n        from rlist import rlist\n        from dataclasses import dataclass\n\n        @dataclass\n        class Person:\n            id: int\n            name: str\n\n        people = rlist([Person(1, \"John\"), Person(2, \"George\"), Person(3, \"Mike\")])\n        names = people.map(lambda p: p.name)\n        ```\n        \"\"\"\n        return rlist(map(func, self._list))\n\n    @_delegate\n    def pop(self, index: int | None = None) -&gt; R: ...  # ty: ignore[invalid-return-type]\n\n    def reject(self, func: FilterFunc) -&gt; \"rlist\":\n        \"\"\"\n        Reject items from the list by applying the given function and return\n        a new instance of rlist with the non-rejected items.\n\n        ## Example\n\n        ```python\n        from rlist import rlist\n        from dataclasses import dataclass\n\n        @dataclass\n        class Person:\n            id: int\n            name: str\n\n        people = rlist([Person(1, \"John\"), Person(2, \"George\"), Person(3, \"Mike\")])\n        people_without_e = people.reject(lambda p: 'e' in p.name)\n        ```\n        \"\"\"\n        return rlist(filterfalse(func, self._list))\n\n    @_delegate\n    def remove(self, item: R) -&gt; R: ...  # ty: ignore[invalid-return-type]\n\n    @_delegate\n    def reverse(self) -&gt; None: ...\n\n    def select(self, func: FilterFunc) -&gt; \"rlist\":\n        \"\"\"\n        Select items from the list by applying the given function and return\n        a new instance of rlist with the selected items.\n\n        ## Example\n\n        ```python\n        from rlist import rlist\n        from dataclasses import dataclass\n\n        @dataclass\n        class Person:\n            id: int\n            name: str\n\n        people = rlist([Person(1, \"John\"), Person(2, \"George\"), Person(3, \"Mike\")])\n        people_with_e = people.select(lambda p: 'e' in p.name)\n        ```\n        \"\"\"\n        return rlist(filter(func, self._list))\n\n    @_delegate\n    def sort(self, *, key: SortFunc, reverse: bool = False) -&gt; None: ...\n\n    def __add__(self, other: RlistAddend) -&gt; \"rlist\":\n        return rlist(self._list + other)\n\n    @_delegate\n    def __contains__(self, item: R) -&gt; bool: ...  # ty: ignore[invalid-return-type]\n\n    @_delegate\n    def __delitem__(self, index: int | slice) -&gt; None: ...\n\n    @_delegate_comparison\n    def __eq__(self, other: Any) -&gt; bool: ...  # ty: ignore[invalid-return-type]\n\n    @_delegate_comparison\n    def __ge__(\n        self, other: RlistComparand\n    ) -&gt; bool: ...  # ty: ignore[invalid-return-type]\n\n    @_delegate\n    def __getitem__(\n        self, index: int | slice\n    ) -&gt; R: ...  # ty: ignore[invalid-return-type]\n\n    @_delegate_comparison\n    def __gt__(\n        self, other: RlistComparand\n    ) -&gt; bool: ...  # ty: ignore[invalid-return-type]\n\n    def __iadd__(self, other: RlistAddend) -&gt; Self:\n        if not isinstance(other, rlist):\n            self._list += other\n        else:\n            self._list += other._list\n\n        return self\n\n    def __isub__(self, other: Any) -&gt; Self:\n        if not isinstance(other, rlist):\n            self._list -= other\n        else:\n            self._list -= other._list\n\n        return self\n\n    def __imul__(self, other: RlistMultiplier) -&gt; Self:\n        if not isinstance(other, rlist):\n            self._list *= other\n        else:\n            self._list *= other._list\n\n        return self\n\n    @_delegate\n    def __iter__(self) -&gt; Iterator[R]: ...  # ty: ignore[invalid-return-type]\n\n    @_delegate_comparison\n    def __le__(\n        self, other: RlistComparand\n    ) -&gt; bool: ...  # ty: ignore[invalid-return-type]\n\n    @_delegate\n    def __len__(self) -&gt; int: ...  # ty: ignore[invalid-return-type]\n\n    @_delegate_comparison\n    def __lt__(\n        self, other: RlistComparand\n    ) -&gt; bool: ...  # ty: ignore[invalid-return-type]\n\n    def __mul__(self, other: RlistMultiplier) -&gt; \"rlist\":\n        return rlist(self._list * other)\n\n    @_delegate_comparison\n    def __ne__(self, other: Any) -&gt; bool: ...  # ty: ignore[invalid-return-type]\n\n    def __radd__(self, other: RlistAddend) -&gt; \"rlist\":\n        return rlist(other + self._list)\n\n    def __repr__(self) -&gt; str:\n        return str(self)\n\n    def __rmul__(self, other: RlistMultiplier) -&gt; \"rlist\":\n        return rlist(other * self._list)\n\n    @_delegate\n    def __reversed__(self) -&gt; Iterator[R]: ...  # ty: ignore[invalid-return-type]\n\n    @_delegate\n    def __setitem__(self, index: int | slice, item: R) -&gt; None: ...\n\n    @_delegate\n    def __sizeof__(self) -&gt; int: ...  # ty: ignore[invalid-return-type]\n\n    def __str__(self) -&gt; str:\n        return f\"&lt;rlist: {self._list}&gt;\"\n</code></pre>"},{"location":"rlist/#rlist.rlist.rlist.copy","title":"<code>copy()</code>","text":"<p>Return a shallow copy of the rlist.</p> Source code in <code>src/rlist/rlist.py</code> <pre><code>def copy(self) -&gt; \"rlist\":\n    \"\"\"\n    Return a shallow copy of the rlist.\n    \"\"\"\n    return rlist(self._list)\n</code></pre>"},{"location":"rlist/#rlist.rlist.rlist.map","title":"<code>map(func)</code>","text":"<p>Apply the given function to the items of the list and return a new instance of rlist with the mapped items.</p>"},{"location":"rlist/#rlist.rlist.rlist.map--example","title":"Example","text":"<pre><code>from rlist import rlist\nfrom dataclasses import dataclass\n\n@dataclass\nclass Person:\n    id: int\n    name: str\n\npeople = rlist([Person(1, \"John\"), Person(2, \"George\"), Person(3, \"Mike\")])\nnames = people.map(lambda p: p.name)\n</code></pre> Source code in <code>src/rlist/rlist.py</code> <pre><code>def map(self, func: MapFunc) -&gt; \"rlist\":\n    \"\"\"\n    Apply the given function to the items of the list and return a new instance\n    of rlist with the mapped items.\n\n    ## Example\n\n    ```python\n    from rlist import rlist\n    from dataclasses import dataclass\n\n    @dataclass\n    class Person:\n        id: int\n        name: str\n\n    people = rlist([Person(1, \"John\"), Person(2, \"George\"), Person(3, \"Mike\")])\n    names = people.map(lambda p: p.name)\n    ```\n    \"\"\"\n    return rlist(map(func, self._list))\n</code></pre>"},{"location":"rlist/#rlist.rlist.rlist.reject","title":"<code>reject(func)</code>","text":"<p>Reject items from the list by applying the given function and return a new instance of rlist with the non-rejected items.</p>"},{"location":"rlist/#rlist.rlist.rlist.reject--example","title":"Example","text":"<pre><code>from rlist import rlist\nfrom dataclasses import dataclass\n\n@dataclass\nclass Person:\n    id: int\n    name: str\n\npeople = rlist([Person(1, \"John\"), Person(2, \"George\"), Person(3, \"Mike\")])\npeople_without_e = people.reject(lambda p: 'e' in p.name)\n</code></pre> Source code in <code>src/rlist/rlist.py</code> <pre><code>def reject(self, func: FilterFunc) -&gt; \"rlist\":\n    \"\"\"\n    Reject items from the list by applying the given function and return\n    a new instance of rlist with the non-rejected items.\n\n    ## Example\n\n    ```python\n    from rlist import rlist\n    from dataclasses import dataclass\n\n    @dataclass\n    class Person:\n        id: int\n        name: str\n\n    people = rlist([Person(1, \"John\"), Person(2, \"George\"), Person(3, \"Mike\")])\n    people_without_e = people.reject(lambda p: 'e' in p.name)\n    ```\n    \"\"\"\n    return rlist(filterfalse(func, self._list))\n</code></pre>"},{"location":"rlist/#rlist.rlist.rlist.select","title":"<code>select(func)</code>","text":"<p>Select items from the list by applying the given function and return a new instance of rlist with the selected items.</p>"},{"location":"rlist/#rlist.rlist.rlist.select--example","title":"Example","text":"<pre><code>from rlist import rlist\nfrom dataclasses import dataclass\n\n@dataclass\nclass Person:\n    id: int\n    name: str\n\npeople = rlist([Person(1, \"John\"), Person(2, \"George\"), Person(3, \"Mike\")])\npeople_with_e = people.select(lambda p: 'e' in p.name)\n</code></pre> Source code in <code>src/rlist/rlist.py</code> <pre><code>def select(self, func: FilterFunc) -&gt; \"rlist\":\n    \"\"\"\n    Select items from the list by applying the given function and return\n    a new instance of rlist with the selected items.\n\n    ## Example\n\n    ```python\n    from rlist import rlist\n    from dataclasses import dataclass\n\n    @dataclass\n    class Person:\n        id: int\n        name: str\n\n    people = rlist([Person(1, \"John\"), Person(2, \"George\"), Person(3, \"Mike\")])\n    people_with_e = people.select(lambda p: 'e' in p.name)\n    ```\n    \"\"\"\n    return rlist(filter(func, self._list))\n</code></pre>"},{"location":"types/","title":"Types","text":""}]}